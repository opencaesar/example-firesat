/* 
 * The Maven coordinates for the project artifact
 */
description='The FireSat example project'
group = 'io.opencaesar.ontologies'
version = '2.3.1'

/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
		mavenLocal()
		maven { url 'https://dl.bintray.com/opencaesar/adapters' }
		maven { url 'https://dl.bintray.com/opencaesar/owl-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml' }
		maven { url 'https://dl.bintray.com/vermeulen-mp/gradle-plugins' }
		jcenter()
	}
	dependencies {
		classpath 'io.opencaesar.owl:owl-doc-gradle:+'
		classpath 'io.opencaesar.owl:owl-fuseki-gradle:+'
		classpath 'io.opencaesar.owl:owl-shacl-fuseki-gradle:+'
		classpath 'io.opencaesar.owl:owl-query-gradle:+'
		classpath 'io.opencaesar.owl:owl-load-gradle:+'
		classpath 'io.opencaesar.owl:owl-reason-gradle:+'
		classpath 'io.opencaesar.adapters:oml2owl-gradle:0.8.+'
		classpath 'io.opencaesar.oml:oml-bikeshed-gradle:0.8.+'
		classpath 'io.opencaesar.oml:oml-merge-gradle:0.8.+'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
		// needed since gradle-bintray-plugin brings an old version of xerces
		classpath 'io.opencaesar.docbook:docbook-generator-gradle:+'
		classpath 'io.opencaesar.docbook:docbook-renderer-gradle:+'
		// needed since gradle bintray brings an old version of xerces
		configurations.classpath.exclude group: 'xerces', module: 'xercesImpl'
	}
}

/*
 * Dependency versions
 */
ext { 
	imceVersion = '2.+'
}

/*
 * The configuration of OML dependencies
 */
configurations {
	oml // Include the oml dependencies only
    stylesheets // Include the docbook stylesheets
}

/*
 * The repositories to look up OML dependencies in
 */
repositories {
	mavenLocal()
	maven { url 'https://dl.bintray.com/opencaesar/ontologies' }
	jcenter()
}

/*
 * The OML dependencies
 */
dependencies {
	oml "io.opencaesar.ontologies:imce-vocabularies:$imceVersion"
	stylesheets "io.opencaesar.docbook:docbook-stylesheets:+"
}

/*
 * A task to extract and merge the OML dependencies
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask) {
    inputZipPaths = configurations.oml.files
    outputCatalogFolder = file('build/oml')
}

/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task omlToBikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask, dependsOn: downloadDependencies) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL folder
	outputFolderPath = file('build/bikeshed')
	// Input Ontology Iri
	rootOntologyIri = 'http://opencaesar.io/examples/firesat/bundle'
	// Publish URL
	publishUrl = 'https://opencaesar.github.io/firesat-example'
}

/*
 * A task to generate the model documentation in HTML
 */
import org.gradle.internal.os.OperatingSystem
task generateDocs(dependsOn: omlToBikeshed) {
	doLast {
		if (OperatingSystem.current().isWindows()) {
			exec { commandLine 'build/bikeshed/publish.bat' }
		} else {
			exec { commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' }
			exec { commandLine 'build/bikeshed/publish.sh' }
		}
	}
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, dependsOn: downloadDependencies) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL catalog
	outputCatalogPath = file('build/owl/catalog.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReason(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://opencaesar.io/examples/firesat/bundle'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://opencaesar.io/examples/firesat/bundle/classes = ALL_SUBCLASS',
		'http://opencaesar.io/examples/firesat/bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://opencaesar.io/examples/firesat/bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/reasoning.xml')
}

/*
 * Start and stop the Fuseki server
 */
task startFuseki(type: io.opencaesar.owl.fuseki.StartFusekiTask) {
	configurationPath = file('.fuseki.ttl')
	outputFolderPath = file('.fuseki')
}

task stopFuseki(type: io.opencaesar.owl.fuseki.StopFusekiTask) {
	outputFolderPath = file('.fuseki')
}

/*
 * A task to load an OWL catalog to a Fuseki dataset endpoint
 */
task owlLoad(type:io.opencaesar.owl.load.OwlLoadTask, dependsOn: owlReason) {
	catalogPath = file('build/owl/catalog.xml')
	endpointURL = 'http://localhost:3030/firesat'
    fileExtensions = ['owl', 'ttl']
	iris = [
		'http://opencaesar.io/examples/firesat/bundle/classes',
	    'http://opencaesar.io/examples/firesat/bundle/properties',
	    'http://opencaesar.io/examples/firesat/bundle/individuals'
	]
}

/*
 * A task to run a set of SPARQL queries on a Fuseki dataset endpoint
 */
task owlQuery(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlLoad) {
	endpointURL = 'http://localhost:3030/firesat'
	queryPath = file('src/sparql')
	resultPath = file('build/frames')
}

/*
 * A task to run a set of SHACL validation rules on a Fuseki dataset endpoint
 */
task owlShacl(type:io.opencaesar.owl.shacl.fuseki.OwlShaclFusekiTask, dependsOn: owlLoad) {
	endpointURL = 'http://localhost:3030/firesat'
	queryPath = file('src/shacl')
	resultPath = file('build/reports')
}

/*
 * Zips stylesheets from docbook-stylesheets (local maven)
 * Places them in build/stylesheets-gen 
 */
task stylesheetUnzip(type: Copy) {
  from configurations.stylesheets.files.collect { zipTree(it) }
  into file("build/stylesheets-gen")
}
/*
 * Gradle tasks to render the docbook physical_structure
 */
task physicalGenerate(type:io.opencaesar.owl.doc.OwlDocTask) {
	endpointURL = 'http://localhost:3030/firesat'
	documentIRI = 'http://opencaesar.io/examples/firesat/programs/earth-science/projects/firesat/documents/system-decomposition#PhysicalDecomposition'
	outputPath = file('build/reports/physical_structure/physical_structure.json')
}

task physicalDocbook(type:io.opencaesar.docbook.generator.DocbookGeneratorTask, dependsOn: physicalGenerate) {
	input = file('build/reports/physical_structure/physical_structure.json')
	output = file('build/reports/physical_structure/physical_structure.xml')
}

task physicalPDF(type:io.opencaesar.docbook.renderer.DocbookRendererTask, dependsOn: stylesheetUnzip) {
	input = file('build/reports/physical_structure/physical_structure.xml')
	output = file('build/reports/physical_structure/physical_structure.pdf')
	type = 'pdf'
	xsl = file('build/stylesheets-gen/pdf/pdf.xsl')
}

task physicalHTML(type:io.opencaesar.docbook.renderer.DocbookRendererTask, dependsOn: stylesheetUnzip) {
	input = file('build/reports/physical_structure/physical_structure.xml')
	output = file('build/reports/physical_structure/physical_structure.html')
	type = 'html'
	xsl = file('build/stylesheets-gen/html/html.xsl')
	css = file('build/stylesheets-gen/default.css')
}

physicalGenerate.mustRunAfter(owlLoad)
physicalDocbook.mustRunAfter(physicalGenerate)
physicalHTML.mustRunAfter(physicalDocbook)
physicalPDF.mustRunAfter(physicalDocbook)

task physicalRender() {
	dependsOn owlLoad
	dependsOn physicalGenerate
	dependsOn physicalDocbook
	dependsOn physicalPDF
	dependsOn physicalHTML
}

/*
 * Gradle tasks to render the docbook wbs document
 */
task wbsGenerate(type:io.opencaesar.owl.doc.OwlDocTask) {
	endpointURL = 'http://localhost:3030/firesat'
	documentIRI = 'http://opencaesar.io/examples/firesat/programs/earth-science/projects/firesat/documents/work-breakdown-structure#WorkBreakdownStructure'
	outputPath = file('build/reports/wbs/wbs.json')
}

task wbsDocbook(type:io.opencaesar.docbook.generator.DocbookGeneratorTask, dependsOn: wbsGenerate) {
	input = file('build/reports/wbs/wbs.json')
	output = file('build/reports/wbs/wbs.xml')
}

task wbsPDF(type:io.opencaesar.docbook.renderer.DocbookRendererTask, dependsOn: stylesheetUnzip) {
	input = file('build/reports/wbs/wbs.xml')
	output = file('build/reports/wbs/wbs.pdf')
	type = 'pdf'
	xsl = file('build/stylesheets-gen/pdf/pdf.xsl')
}

task wbsHTML(type:io.opencaesar.docbook.renderer.DocbookRendererTask, dependsOn: stylesheetUnzip) {
	input = file('build/reports/wbs/wbs.xml')
	output = file('build/reports/wbs/wbs.html')
	type = 'html'
	xsl = file('build/stylesheets-gen/html/html.xsl')
	css = file('build/stylesheets-gen/default.css')
}

wbsGenerate.mustRunAfter(owlLoad)
wbsDocbook.mustRunAfter(wbsGenerate)
wbsPDF.mustRunAfter(wbsDocbook)
wbsHTML.mustRunAfter(wbsDocbook)

task wbsRender() {
	dependsOn owlLoad
	dependsOn wbsGenerate
	dependsOn wbsDocbook
	dependsOn wbsPDF
	dependsOn wbsHTML
}


/*
 * A task to build the project, which executes several tasks together
 */
task build() {
	dependsOn owlReason
	// dependsOn bikeshed2html
	dependsOn stylesheetUnzip
}

/*
 * A task to delete the build artifacts
 */
task clean(type: Delete) {
	delete 'build'
}

/*
 * Publish to Maven spec
 */
apply plugin: 'maven-publish'

task omlZip(type: Zip) {
	from file('src/oml')
	include "**/*.oml"
	destinationDirectory = file('build/libs')
	archiveBaseName = project.name
	archiveVersion = project.version
}

task vocabularyZip(type: Zip) {
	from file('src/oml')
	include "imce.jpl.nasa.gov/**/*.oml"
	destinationDirectory = file('build/libs')
	archiveBaseName = project.name
	archiveVersion = project.version
	archiveClassifier = 'vocabularies'
}

publishToMavenLocal.dependsOn omlZip, vocabularyZip

publishing {
    publications {
        maven(MavenPublication) {
            artifact omlZip
            artifact vocabularyZip
			pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.oml.allDependencies.stream().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
            }
        }
    }
}

/*
 * Publish to Bintrary Spec
 */
apply plugin: 'com.jfrog.bintray'

ext.gh = [
	dep: 'https://github.com',
	org: 'opencaesar',
	rep: 'firesat-example',
	bintray: 'ontologies'
]

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_API_KEY')
	publications = ['maven']
	publish = true
	override = true
	pkg {
		name = project.name
		repo = gh.bintray
		userOrg = gh.org
		desc = project.description
		licenses = ['Apache-2.0']
		websiteUrl = gh.dep+'/'+gh.org+'/'+gh.rep
        issueTrackerUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'/issues'
		vcsUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'.git'
		version {
			name = project.version
			desc = project.version
			released  = new Date()
		}
	}
}

/*
 * Integration with the Eclipse IDE
 */ 
apply plugin: 'eclipse'

eclipse {
    synchronizationTasks downloadDependencies
}
